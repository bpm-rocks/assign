#!/usr/bin/env bash
. bpm
bpm::include unittest
unittest::run

unittest::setup() {
    . ../libassign
}

returnArray() {
    local src

    # shellcheck disable=SC2034
    src=(one two "3 3" four)
    local "${1-}" && assign::byRef "$1" src
}

unittest::case::returning-array() {
    local dest

    returnArray dest
    [[ "${#dest[@]}" -eq 4 ]] || return 1
    [[ "${dest[0]}" == "one" ]] || return 1
    [[ "${dest[1]}" == "two" ]] || return 1
    [[ "${dest[2]}" == "3 3" ]] || return 1
    [[ "${dest[3]}" == "four" ]]
}

unittest::case::returning-array-conflicting-names() {
    local src

    returnArray src

    # This is testing for the presence of a limitation. We can't use byRef
    # to send back a value to a variable with the same name in the parent
    # scope.
    [[ "${src-a}" != "${src-b}" ]]
}

returnString() {
    local src

    src="abc123"
    local "${1-}" && assign::byRef "$1" src
}

unittest::case::returning-string() {
    local dest

    returnString dest
    [[ "$dest" == "abc123" ]]
}

unittest::case::returning-string-conflicting-names() {
    local src

    returnString src

    # This is testing for the presence of a limitation. We can't use byRef
    # to send back a value to a variable with the same name in the parent
    # scope.
    [[ "${src-a}" != "${src-b}" ]]
}

returnInvalidVariable() {
    local src

    local "${1-}" && assign::byRef "$1" src
}

unittest::case::invalid-variable() {
    local dest

    returnInvalidVariable dest

    # Testing that the variable is not set.
    [[ -z "${dest+_}" ]]
}

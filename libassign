#!/usr/bin/env bash

# Array Splitting
# ---------------
#
# IFS must be set to a string containing space or unset in order for
# the array slicing to work regardless of the current IFS setting on
# bash 3.  This is detailed further at
# https://github.com/fidian/gg-core/pull/7

. bpm
bpm::include is

# Send an array as a variable up to caller of a function. It is best used
# with some odd syntax as shown in the example, which preserves empty arrays.
#
# $1   - Variable name
# $2-@ - Array elements
#
# Examples
#
#   callFunc () {
#       local myArray=(one two three)
#       local "${1-}" && assign::array "$1" ${myArray[@]+"${myArray[@]}"}
#   }
#   callFunc dest
#   echo "${dest[@]}" # writes "one two three"
#
# Returns nothing.
assign::array() {
    local IFS

    # Must set IFS - see the "Array Splitting" discussion.
    IFS=
    unset -v "$1"

    eval "$(printf "%s=(\"\${@:2}\")" "$1")"
}


# Assigns a value by reference.
#
# $1 - Destination variable name.
# $2 - Source variable name.
#
# Copies an array or scalar to the destination. This can be much simpler than
# assigning arrays. See the example for further information.
#
# Examples
#
#   # Copy a value
#   a="a string"
#   assign::byRef b a
#   echo "$b"  # "a string"
#
#   # Copy an array with an unknown number of elements (even zero)
#   # Replace "..." with zero or more elements.
#   theArray=( ... )
#   assign::byRef theArrayCopy theArray
#   set | grep ^theArray
#   # This shows the array was copied
#
#   # Copies an unset value as well.
#   unset unsetValue
#   unsetValueCopy=something
#   assign::byRef unsetValueCopy unsetValue
#   set | grep ^unsetValue
#   # Neither shows up.
#
# Returns nothing.
assign::byRef() {
    unset -v "$1"

    if is::array "$2"; then
        # This looks awful. It generates a string like this
        # [[ ${#SRC[@]} -gt 0 ]] && DST=("${SRC[@]}") || DST=()
        eval "$(printf "[[ \${#%s[@]} -gt 0 ]] && %s=(\"\${%s[@]}\") || %s=()" "$2" "$1" "$2" "$1")"
    elif [[ -n "${!2+_}" ]]; then
        # If there is a value, copy it.
        printf -v "$1" '%s' "${!2}"
    fi
}


# Assign stdin to a value, preserving all newlines and everything that is
# piped in.
#
# $1 - Variable name.
#
# Examples:
#
#   # This assigns *all* output to the variable
#   assign::pipe output < <(ls)
#
#   # This does not; it trims the trailing newline.
#   output=$(ls)
#
#   # Do not use it this way because the later functions are spawned in
#   # subshells, thus can not really change the value how you want.
#   echo "DOES NOT WORK THIS WAY" | assign::pipe badExample
#
#   # Works with heredocs!
#   assign::pipe helpMessage <<'EOF'
#   This is my help message.
#   It can have "quotes", 'apostrophes' and `backticks`.
#   EOF
assign::pipe() {
    assign::value "$1" "$(
        cat

        # Tricky thing part 1: append a period to the end so the subshell
        # preserves any newlines at the end that cat found.
        echo -n "."
    )"

    # Tricky thing part 2: remove that newline. This is all done without
    # using a temporary variable so we don't need to worry about conflicting
    # with parent scope variables.
    assign::value "$1" "${!1%.}"
}


# Send a variable up to the parent of the caller of this function.
#
# $1 - Variable name.
# $2 - Value to assign.
#
# Examples
#
#   callFunc() {
#       local dest
#       dest="Just an example to prove the local variable is overwritten"
#       local "${1-}" && assign::value "$1" "the value"
#   }
#
#   dest="value from target scope, ignored"
#   callFunc dest
#   echo "$dest"  # writes "the value"
#
# Returns nothing.
assign::value() {
    unset -v "$1"
    printf -v "$1" '%s' "${2-}"
}
